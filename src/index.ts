import { app, BrowserWindow, ipcMain } from 'electron';
import { get } from 'http';
import { StoreRepository } from './StoreRepository';
import { EmptyStoreAdapter, ErrorStoreAdapter, StoreAdapter } from './fake-store-api-client';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let storeWindow: BrowserWindow;
const createWindow = async (): Promise<void> => {
  // Create the browser window.
  storeWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  storeWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  storeWindow.webContents.on('did-finish-load', async () => {
    await initializeStore();
  });
  
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
// This is the main process of the Electron app.


let storeRepo = new StoreRepository(new StoreAdapter());

export async function initializeStore() {
  const productsOrError = await storeRepo.getProductsOrError();
  storeWindow.webContents.send('load-products', productsOrError);
}

ipcMain.on("set-empty-store", async () => {
  storeRepo = new StoreRepository(new EmptyStoreAdapter());
  await initializeStore();
});

ipcMain.on("set-store-with-error", async () => {
  storeRepo = new StoreRepository(new ErrorStoreAdapter());
  await initializeStore();
});
