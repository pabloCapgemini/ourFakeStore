import { app, BrowserWindow, ipcMain } from 'electron';
import { getProducts } from './fake-store-api-client';
import { Product } from './domain/Product';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let storeWindow: BrowserWindow;
const createWindow = (): void => {
  // Create the browser window.
  storeWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  storeWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  storeWindow.webContents.on('did-finish-load', async () => {
    console.log('App finsihed loading... ');
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

export class StoreRepository{
  public async getProducts(): Promise<Product[]> {
    const products = await getProducts();
    return products;
  }
}

export class EmptyStoreRepository{
  public async getProducts(): Promise<Product[]> {
    return [];
  }
}

let storeRepo = new StoreRepository();

ipcMain.handle("fetch-products", async () => {

  const products = await storeRepo.getProducts();
  console.log('products: ' + products);
  return products;
});

ipcMain.on('set-empty-store', (event) => {
  storeRepo = new EmptyStoreRepository();
});

// ipcMain.on("set-store-with-error", async () => {
//   storeRepo = new ErrorStoreRepository();
//   await initializeStore();
// });
